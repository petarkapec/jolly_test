package hr.JollyBringer.JollyBringer.rest;

import opp.domain.Group;
import opp.domain.Student;
import opp.service.GroupService;
import opp.service.RequestDeniedException;
import opp.service.StudentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.User;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.List;
import java.util.Set;

@RestController
@RequestMapping("/groups")
public class GroupController {

  @Autowired
  private GroupService groupService;

  @Autowired
  private StudentService studentService;

  @GetMapping("")
  public List<Group> listGroups() {
    return groupService.listAll();
  }

  @GetMapping("/{id}")
  public Group getGroup(@PathVariable("id") Long id) {
    return groupService.fetch(id);
  }

  @PostMapping("")
  @Secured("ROLE_LEAD")
  public ResponseEntity<Group> createGroup(@RequestBody CreateGroupDTO dto, @AuthenticationPrincipal User u) {
    Group saved = groupService.createGroup(dto.getName(), u.getUsername());
    return ResponseEntity.created(URI.create("/groups/" + saved.getId())).body(saved);
  }

  @PatchMapping("/{id}")
  @Secured("ROLE_LEAD")
  public Group patchName(
          @PathVariable("id") Long groupId,
          @RequestBody CreateGroupDTO dto,
          @AuthenticationPrincipal User u)
  {
    String coordinatorJmbag = groupService.fetch(groupId).getCoordinator().getJmbag();
    if (!coordinatorJmbag.equals(u.getUsername()))
      throw new RequestDeniedException("Only group coordinator can change group name, not: " + u);
    return groupService.updateGroupName(groupId, dto.getName());
  }

  @GetMapping("/{id}/members")
  public Set<Student> getGroupMembers(@PathVariable("id") Long id) {
    return groupService.fetch(id).getMembers();
  }

  @PutMapping("/{gid}/members/{sid}")
  @Secured("ROLE_STUDENT")
  public ResponseEntity<?> addGroupMember(
          @PathVariable("gid") Long gid,
          @PathVariable("sid") Long sid,
          @AuthenticationPrincipal User u)
  {
    checkAllowedToChangeMembers(gid, sid, u.getUsername());
    return ResponseEntity.ok(groupService.addMember(gid, sid));
  }

  @DeleteMapping("/{gid}/members/{sid}")
  @Secured("ROLE_STUDENT")
  public ResponseEntity<?> removeGroupMember(
          @PathVariable("gid") Long gid,
          @PathVariable("sid") Long sid,
          @AuthenticationPrincipal User u)
  {
    checkAllowedToChangeMembers(gid, sid, u.getUsername());
    return ResponseEntity.ok(groupService.removeMember(gid, sid));
  }

  private void checkAllowedToChangeMembers(Long gid, Long sid, String username) {
    String memberJmbag = studentService.fetch(sid).getJmbag();
    String coordinatorJmbag = groupService.fetch(gid).getCoordinator().getJmbag();
    if (!memberJmbag.equals(username) && !coordinatorJmbag.equals(username))
      throw new RequestDeniedException(
        "Only coordinator (" + coordinatorJmbag + ") or member (" + memberJmbag +
        ") can add to group #" + gid + ", not: " + username
      );
  }
}
